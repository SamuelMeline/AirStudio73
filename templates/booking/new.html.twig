{% extends 'base.html.twig' %}

{% block title %}Réserver le cours
{% endblock %}

{% block body %}
	<div class="container mt-5 reserver">
		<div class="row justify-content-center">
			<div class="col-md-6">
				<div class="card">

					<h1 class="card-title">Réserver le cours : {{ course.name }}</h1>

					<div class="card-body">
						{{ form_start(form) }}
						<div class="form-group form-check">
							{{ form_widget(form.isRecurrent, {'attr': {'class': 'form-check-input js-recurrent-checkbox'}}) }}
							{{ form_label(form.isRecurrent, null, {'label_attr': {'class': 'form-check-label'}}) }}
						</div>

						<!-- Ce conteneur est masqué par défaut -->
						<div id="num-occurrences-container" class="form-group" style="display: none;">
							<div class="mt-2">
								<!-- Liste des crédits par cours -->
								<h3>Crédits restants par cours :</h3>
								<ul>
									{% for courseName, credits in remainingCredits %}
										<li>{{ courseName }} : {{ credits }} crédit(s)</li>
									{% endfor %}
								</ul>

								<!-- Cours disponible pour la réservation actuelle -->
								<p>Cours disponible : <span id="available-courses">{{ remaining_courses }}</span></p>

								<!-- Formulaire pour nombre de cours récurrents -->
								{{ form_label(form.numOccurrences, null, {'label_attr': {'class': 'form-label'}}) }}
								<div class="d-flex align-items-center">
									{{ form_widget(form.numOccurrences, {'attr': {'class': 'form-control js-num-occurrences w-25'}}) }}
									<button type="button" id="max-occurrences-button" class="btn btn-secondary ml-2">Max</button>
								</div>
							</div>
						</div>

						{{ form_rest(form) }}
						<button type="submit" class="btn reserve-btn btn-block mt-3">Réserver</button>
						{{ form_end(form) }}
						<a href="{{ path('calendar') }}" class="btn btn-general btn-block mt-3">Retour au calendrier</a>
					</div>
				</div>
			</div>
		</div>
	</div>

	<script>
		document.addEventListener('DOMContentLoaded', function () {
			const recurrentCheckbox = document.querySelector('.js-recurrent-checkbox');
			const numOccurrencesContainer = document.getElementById('num-occurrences-container');
			const numOccurrencesInput = document.querySelector('.js-num-occurrences');
			const maxOccurrencesButton = document.getElementById('max-occurrences-button');
			const availableCoursesSpan = document.getElementById('available-courses');
			const courseId = {{ course.id }}; // Ajoute l'ID du cours pour l'API

			const updateAvailableCourses = () => {
				fetch(`/booking/available-courses/${courseId}`)
					.then(response => response.json())
					.then(data => {
						const availableCourses = data.availableCourses;

						// Mettre à jour le texte à côté du bouton Max
						availableCoursesSpan.textContent = availableCourses;

						// Mise à jour bouton Max pour calculer le nombre d'occurrences
						maxOccurrencesButton.addEventListener('click', function () {
							// Calculer le minimum entre les crédits restants et les cours disponibles
							const maxOccurrences = Math.min(availableCourses, {{ remaining_courses }});
							numOccurrencesInput.value = maxOccurrences;
						});
					})
					.catch(error => console.error('Error fetching available courses:', error));
			};

			// Appeler la fonction au chargement de la page
			updateAvailableCourses();

			// Gérer l'affichage/masquage du conteneur en fonction de la case cochée
			recurrentCheckbox.addEventListener('change', function () {
				if (recurrentCheckbox.checked) {
					numOccurrencesContainer.style.display = 'block';
					numOccurrencesInput.required = true;
					updateAvailableCourses(); // Mettre à jour lorsque la case est cochée
				} else {
					numOccurrencesContainer.style.display = 'none';
					numOccurrencesInput.required = false;
					numOccurrencesInput.value = '';
				}
			});

			// Si la case est déjà cochée au chargement de la page, afficher le champ numOccurrences
			if (recurrentCheckbox.checked) {
				numOccurrencesContainer.style.display = 'block';
				numOccurrencesInput.required = true;
			}
		});
	</script>
{% endblock %}
