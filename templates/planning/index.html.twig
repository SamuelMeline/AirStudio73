{% extends 'base.html.twig' %}

{% block title %}Planning
{% endblock %}

{% block body %}
	<div class="container planning">
		<h1>Planning</h1>

		{% if is_granted('ROLE_ADMIN') %}
			<a href="{{ path('planning_edit') }}" class="btn btn-general mb-3">Ajouter une session</a>
		{% endif %}

		<!-- Vue Desktop -->
		<div class="row desktop">
			<div class="col col-9 content-scrollable">
				<table class="table table-bordered">
					<thead>
						<tr>
							<th>Horaires</th>
							<th>Lundi</th>
							<th>Mardi</th>
							<th>Mercredi</th>
							<th>Jeudi</th>
							<th>Vendredi</th>
						</tr>
					</thead>
					<tbody>
						{% set weekday_timeslots = [
                            '14:30', '15:00', '15:30', '16:00', '16:15', '16:30', '16:45', '17:00', '17:15', '17:30','17:45',
                            '18:00', '18:15', '18:30', '18:45', '19:00', '19:15', '19:30', '19:45',
                            '20:00', '20:15', '20:30'
                        ] %}

						{% set merged_slots = {} %}

						{% for timeslot in weekday_timeslots %}
							<tr>
								{% set interval = (timeslot >= '16:00') ? 15 : 30 %}
								<td>{{ timeslot }}
									-
									{{ timeslot|date_modify('+' ~ interval ~ ' minutes')|date('H:i') }}</td>
								{% for dow in ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi'] %}
									{% set key = dow ~ '-' ~ timeslot %}
									{% if merged_slots[key] is not defined %}
										{% set course_found = false %}
										{% for schedule in schedules %}
											{% set start_time = schedule.startTime|date('H:i') %}
											{% set end_time = schedule.endTime|date('H:i') %}
											{% set start_slot = timeslot %}
											{% set duration = (schedule.endTime|date('U') - schedule.startTime|date('U')) // (interval * 60) %}
											{% set slots_covered = duration - 1 %}

											{% if schedule.day == dow and start_time == start_slot %}
												{% set class_name = '' %}
												{% if schedule.courseName == 'Yoga aérien' %}
													{% set class_name = 'bg-yoga-aerien' %}
												{% elseif schedule.courseName == 'Pole Dance' %}
													{% set class_name = 'bg-pole-dance' %}
												{% elseif schedule.courseName == 'Hammock' %}
													{% set class_name = 'bg-hammock' %}
												{% elseif schedule.courseName == 'Souplesse/ Renfo' %}
													{% set class_name = 'bg-souplesse' %}
												{% elseif schedule.courseName == 'Cours à la demande Particulier / Essais /Coaching' %}
													{% set class_name = 'bg-cours-demande' %}
												{% endif %}
												<td class="{{ class_name }}" rowspan="{{ duration }}">
													{{ schedule.courseName }}<br>
													({{ schedule.startTime|date('H:i') }}
													-
													{{ schedule.endTime|date('H:i') }})
													{% if is_granted('ROLE_ADMIN') %}
														<br>
														<a href="{{ path('planning_edit', {id: schedule.id}) }}" class="btn btn-secondary btn-sm mt-1">Modifier</a>
														<a href="{{ path('planning_delete', {id: schedule.id}) }}" class="btn btn-danger btn-sm mt-1" onclick="return confirm('Êtes-vous sûr de vouloir supprimer cette session ?');">Supprimer</a>
													{% endif %}
												</td>
												{% set course_found = true %}
												{% for i in 0..slots_covered %}
													{% set merged_key = dow ~ '-' ~ (timeslot|date_modify('+' ~ (i * interval) ~ ' minutes')|date('H:i')) %}
													{% set merged_slots = merged_slots|merge({ (merged_key): true }) %}
												{% endfor %}
											{% endif %}
										{% endfor %}
										{% if not course_found %}
											<td>&nbsp;</td>
										{% endif %}
									{% endif %}
								{% endfor %}
							</tr>
						{% endfor %}
					</tbody>
				</table>
			</div>

			<div class="col col-3 content-scrollable">
				<table class="table table-bordered">
					<thead>
						<tr>
							<th>Horaires</th>
							<th>Samedi</th>
						</tr>
					</thead>
					<tbody>
						{% set saturday_timeslots = ['09:00', '09:30', '10:00', '10:30', '11:00', '11:30'] %}

						{% for timeslot in saturday_timeslots %}
							<tr>
								<td>{{ timeslot }}
									-
									{{ timeslot|date_modify('+30 minutes')|date('H:i') }}</td>
								{% set key = 'Samedi-' ~ timeslot %}
								{% if merged_slots[key] is not defined %}
									{% set course_found = false %}
									{% for schedule in schedules %}
										{% set start_time = schedule.startTime|date('H:i') %}
										{% set end_time = schedule.endTime|date('H:i') %}
										{% set start_slot = timeslot %}
										{% set duration = (schedule.endTime|date('U') - schedule.startTime|date('U')) // 1800 %}
										{% set slots_covered = duration - 1 %}

										{% if schedule.day == 'Samedi' and start_time == start_slot %}
											{% set class_name = '' %}
											{% if schedule.courseName == 'Yoga aérien' %}
												{% set class_name = 'bg-yoga-aerien' %}
											{% elseif schedule.courseName == 'Pole Dance' %}
												{% set class_name = 'bg-pole-dance' %}
											{% elseif schedule.courseName == 'Hammock' %}
												{% set class_name = 'bg-hammock' %}
											{% elseif schedule.courseName == 'Souplesse/ Renfo' %}
												{% set class_name = 'bg-souplesse' %}
											{% elseif schedule.courseName == 'Cours à la demande Particulier / Essais /Coaching' %}
												{% set class_name = 'bg-cours-demande' %}
											{% endif %}
											<td class="{{ class_name }}" rowspan="{{ duration }}">
												{{ schedule.courseName }}<br>
												({{ schedule.startTime|date('H:i') }}
												-
												{{ schedule.endTime|date('H:i') }})
												{% if is_granted('ROLE_ADMIN') %}
													<br>
													<a href="{{ path('planning_edit', {id: schedule.id}) }}" class="btn btn-secondary btn-sm">Modifier</a>
													<a href="{{ path('planning_delete', {id: schedule.id}) }}" class="btn btn-danger btn-sm" onclick="return confirm('Êtes-vous sûr de vouloir supprimer cette session ?');">Supprimer</a>
												{% endif %}
											</td>
											{% set course_found = true %}
											{% for i in 0..slots_covered %}
												{% set merged_key = 'Samedi-' ~ (timeslot|date_modify('+' ~ (i * 30) ~ ' minutes')|date('H:i')) %}
												{% set merged_slots = merged_slots|merge({ (merged_key): true }) %}
											{% endfor %}
										{% endif %}
									{% endfor %}
									{% if not course_found %}
										<td>&nbsp;</td>
									{% endif %}
								{% endif %}
							</tr>
						{% endfor %}
					</tbody>
				</table>
			</div>
		</div>

		<!-- Vue Mobile (affichage pour mobile) -->
		<div
			class="mobile">
			<!-- Boutons pour changer de semaine -->
			<div class="calendar-navigation">
				<button id="prevWeekBtn" class="btn-general" onclick="changeWeek(-1)">&lt;</button>
				<span id="currentWeekDate"></span>
				<button id="nextWeekBtn" class="btn-general" onclick="changeWeek(1)">&gt;</button>
			</div>

			<!-- Jours de la semaine avec format abrégé -->
			<div class="day-navigation">
				<button class="btn-general" onclick="showDay('Lundi'); return false;">Lun.</button>
				<button class="btn-general" onclick="showDay('Mardi'); return false;">Mar.</button>
				<button class="btn-general" onclick="showDay('Mercredi'); return false;">Mer.</button>
				<button class="btn-general" onclick="showDay('Jeudi'); return false;">Jeu.</button>
				<button class="btn-general" onclick="showDay('Vendredi'); return false;">Ven.</button>
				<button class="btn-general" onclick="showDay('Samedi'); return false;">Sam.</button>
			</div>

			<!-- Contenu du planning mobile -->
			<div id="planning-content"></div>

			<script>
				// Vérifie que la variable schedules est correctement définie par Twig
const schedules = {{ schedules|json_encode|raw }} || [];

let currentDate = new Date(); // Date actuelle
let selectedDay = getCurrentDay();
// Définit le jour sélectionné par défaut au jour actuel

// Fonction pour formater une date en DD/MM/YYYY
function formatDate(date) {
const day = String(date.getDate()).padStart(2, '0');
const month = String(date.getMonth() + 1).padStart(2, '0');
const year = date.getFullYear();
return `${day}/${month}/${year}`;
}

// Fonction pour calculer la durée en nombre de créneaux horaires (chaque créneau = 15 minutes)
function calculateDuration(startTime, endTime) {
const start = new Date (`1970-01-01T${startTime}:00`);
const end = new Date (`1970-01-01T${endTime}:00`);
const diff = (end - start) / 60000; // Différence en minutes
return diff / 15; // Chaque créneau horaire est de 15 minutes
}

// Fonction pour afficher la semaine courante
function displayCurrentWeek() { // Met à jour la date pour le jour sélectionné
const dayDate = getDateForDay(selectedDay);
document.getElementById('currentWeekDate').textContent = `${selectedDay} ${
formatDate(dayDate)
}`;
showDay(selectedDay); // Afficher le planning pour le jour sélectionné
}

// Fonction pour obtenir le jour actuel en texte (ex: 'Lundi')
function getCurrentDay() {
const dayNames = [
'Lundi',
'Mardi',
'Mercredi',
'Jeudi',
'Vendredi',
'Samedi'
];
return dayNames[currentDate.getDay() - 1]; // Ajuste pour commencer la semaine au lundi
}

// Fonction pour changer de semaine
function changeWeek(weekOffset) {
currentDate.setDate(currentDate.getDate() + weekOffset * 7); // Changer la date courante d'une semaine
displayCurrentWeek(); // Mettre à jour l'affichage
}

// Fonction pour obtenir la date d'un jour spécifique dans la semaine courante
function getDateForDay(dayName) {
const dayNames = [
'Lundi',
'Mardi',
'Mercredi',
'Jeudi',
'Vendredi',
'Samedi'
];
const targetDayIndex = dayNames.indexOf(dayName);
const currentDayIndex = currentDate.getDay() - 1; // Ajuste pour commencer la semaine au lundi
const offset = targetDayIndex - currentDayIndex;
const targetDate = new Date(currentDate);
targetDate.setDate(currentDate.getDate() + offset);
return targetDate;
}

// Fonction pour afficher le planning d'un jour spécifique
function showDay(day) {
selectedDay = day; // Mettre à jour le jour sélectionné
let content = '';
content += `<h2>${day}</h2><table class="table table-bordered"><thead><tr><th>Horaires</th><th>${day}</th></tr></thead><tbody>`;

// Créneaux horaires pour la semaine et le samedi
const timeslots = day === 'Samedi' ? {{ timeSlotsSaturday|json_encode|raw }} : {{ timeSlots|json_encode|raw }};

let scheduleMap = {};
// Pour stocker les cours par créneau horaire

// Remplir le plan de cours pour chaque créneau horaire
schedules.forEach(schedule => {
if (schedule.day === day) {
const courseDuration = calculateDuration(schedule.startTime, schedule.endTime);
for (let i = 0; i < courseDuration; i++) {
const currentTime = new Date (`1970-01-01T${
schedule.startTime
}:00`);
currentTime.setMinutes(currentTime.getMinutes() + i * 15);
const timeSlotKey = currentTime.toTimeString().substring(0, 5);
scheduleMap[timeSlotKey] = {
id: schedule.id,
name: schedule.courseName,
start: schedule.startTime,
end: schedule.endTime
};
}
}
});

// Affichage des créneaux horaires
timeslots.forEach(timeslot => {
const [startTime, endTime] = timeslot.split(' - ');
content += `<tr><td>${timeslot}</td>`;

if (scheduleMap[startTime]) {
const course = scheduleMap[startTime];
if (course.start === startTime) { // Si le cours commence à cet horaire, on l'affiche sur toute sa durée
let className = '';
if (course.name === 'Yoga aérien') 
className = 'bg-yoga-aerien';
 else if (course.name === 'Pole Dance') 
className = 'bg-pole-dance';
 else if (course.name === 'Hammock') 
className = 'bg-hammock';
 else if (course.name === 'Souplesse/ Renfo') 
className = 'bg-souplesse';
 else if (course.name === 'Cours à la demande Particulier / Essais /Coaching') 
className = 'bg-cours-demande';


const courseDuration = calculateDuration(course.start, course.end);
content += `<td class="${className}" rowspan="${courseDuration}">
                            ${
course.name
} (${
course.start
} - ${
course.end
})`;

// Vérifier si l'utilisateur est admin pour ajouter les boutons d'édition et de suppression
if ("{{ is_granted('ROLE_ADMIN') }}") {
content += `
                                <br>
                                <a href="{{ path('planning_edit', {id: '${
course.id
}'}) }}" class="btn btn-secondary btn-sm mt-1">Modifier</a>
                                <a href="{{ path('planning_delete', {id: '${
course.id
}'}) }}" class="btn btn-danger btn-sm mt-1" onclick="return confirm('Êtes-vous sûr de vouloir supprimer cette session ?');">Supprimer</a>
                            `;
}

content += `</td>`;
}
} else { // Sinon, afficher une cellule vide
content += `<td>&nbsp;</td>`;
} content += `</tr>`;
});

content += `</tbody></table>`;
document.getElementById('planning-content').innerHTML = content;

// Mettre à jour la date dans la navigation du calendrier
const dayDate = getDateForDay(day);
document.getElementById('currentWeekDate').textContent = `${day} ${
formatDate(dayDate)
}`;
}

// Afficher la semaine courante au chargement de la page
document.addEventListener('DOMContentLoaded', function () {
displayCurrentWeek();
});
			</script>
		</div>
	</div>
{% endblock %}
