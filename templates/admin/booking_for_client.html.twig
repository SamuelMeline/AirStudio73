{% extends 'base.html.twig' %}

{% block body %}
	<div class="container booking-for-client">
		<h1>Réserver un cours pour un client</h1>

		<!-- Affichage des messages flash -->
		{% for label, messages in app.flashes %}
			{% for message in messages %}
				<div class="alert alert-{{ label }}">
					{{ message }}
				</div>
			{% endfor %}
		{% endfor %}

		<!-- Sélection du client -->
		<form method="GET" action="{{ path('admin_booking_client') }}">
			<div class="form-group">
				<label for="client">Sélectionner un client</label>
				<select name="userId" id="client" class="form-control" onchange="this.form.submit()">
					<option value="">-- Choisissez un client --</option>
					{% for client in clients %}
						<option value="{{ client.id }}" {% if client.id == app.request.query.get('userId') %} selected {% endif %}>
							{{ client.firstName }}
							{{ client.lastName }}
						</option>
					{% endfor %}
				</select>
			</div>
		</form>

		<!-- Afficher les crédits restants pour chaque cours -->
		{% if remainingCredits is not empty %}
			<div class="mt-3">
				<h3>Crédits restants par cours :</h3>
				<ul>
					{% for courseName, credits in remainingCredits %}
						<li>{{ courseName }}
							:
							{{ credits }}
							crédit(s)</li>
					{% endfor %}
				</ul>
			</div>
		{% endif %}

		<!-- Si un client est sélectionné, afficher les cours disponibles -->
		{% if courses is not empty %}
			<form method="POST" action="{{ path('admin_booking_client') }}">
				<input type="hidden" name="userId" value="{{ app.request.query.get('userId') }}">

				<div class="form-group">
					<label for="course">Sélectionner un cours</label>
					<select name="courseId" id="course" class="form-control" required>
						<option value="">-- Choisissez un cours --</option>
						{% for course in courses %}
							<option value="{{ course.id }}" {% if course.id == app.request.query.get('courseId') %} selected {% endif %}>
								{{ course.name }}
								-
								{{ course.startTime|date('d/m/Y H:i') }}
							</option>
						{% endfor %}
					</select>
				</div>

				<!-- Sélection pour la récurrence (caché par défaut) -->
				<div id="recurrence-section" style="display: none;">
					<div class="form-group mt-3">
						<label for="isRecurrent">Récurrent</label>
						<input type="checkbox" name="isRecurrent" id="isRecurrent" class="form-check-input">
					</div>

					<div class="form-group mt-2" id="num-occurrences-container" style="display: none;">
						<label for="numOccurrences">Nombre d'occurrences</label>
						<div class="d-flex align-items-center">
							<input type="number" name="numOccurrences" id="numOccurrences" class="form-control" value="1" min="1">
							<button type="button" id="max-occurrences-button" class="btn btn-secondary ml-2">Max</button>
						</div>
					</div>
				</div>

				<button type="submit" class="btn btn-general mt-3">Réserver pour ce client</button>
			</form>
		{% else %}
			<p class="aucun-dispo">Aucun cours disponible pour ce client.</p>
		{% endif %}
	</div>

	<!-- Script pour gérer l'affichage dynamique -->
	<script>
		document.addEventListener('DOMContentLoaded', function () {
    const courseSelect = document.getElementById('course');
    const recurrenceSection = document.getElementById('recurrence-section');
    const recurrentCheckbox = document.getElementById('isRecurrent');
    const numOccurrencesContainer = document.getElementById('num-occurrences-container');
    const numOccurrencesInput = document.getElementById('numOccurrences');
    const maxOccurrencesButton = document.getElementById('max-occurrences-button');
    let remainingCredits = {{ remainingCredits|json_encode|raw }}; // Récupérer les crédits depuis PHP

    // Montrer la section de récurrence après avoir sélectionné un cours
    courseSelect.addEventListener('change', function () {
        if (courseSelect.value) {
            recurrenceSection.style.display = 'block';
        } else {
            recurrenceSection.style.display = 'none';
        }
    });

    // Afficher ou masquer le champ pour le nombre d'occurrences selon l'état de la case à cocher
    recurrentCheckbox.addEventListener('change', function () {
        if (recurrentCheckbox.checked) {
            numOccurrencesContainer.style.display = 'block';
            numOccurrencesInput.required = true;
        } else {
            numOccurrencesContainer.style.display = 'none';
            numOccurrencesInput.required = false;
            numOccurrencesInput.value = ''; // Réinitialiser la valeur
        }
    });

    // Bouton "Max" pour le nombre d'occurrences
    maxOccurrencesButton.addEventListener('click', function () {
        const selectedCourseName = courseSelect.options[courseSelect.selectedIndex].text.split(' - ')[0];
        const maxCredits = remainingCredits[selectedCourseName] || 1; // Si aucun crédit trouvé, mettre par défaut à 1
        numOccurrencesInput.value = maxCredits;
    });

    // Limitation du nombre d'occurrences saisies par l'utilisateur
    numOccurrencesInput.addEventListener('input', function () {
        const selectedCourseName = courseSelect.options[courseSelect.selectedIndex].text.split(' - ')[0];
        const maxCredits = remainingCredits[selectedCourseName] || 1;

        // Bloquer la valeur à maxCredits sans afficher d'alerte
        if (parseInt(numOccurrencesInput.value, 10) > maxCredits) {
            numOccurrencesInput.value = maxCredits;
        }
    });
});
	</script>
{% endblock %}
